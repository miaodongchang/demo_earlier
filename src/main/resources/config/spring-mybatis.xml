<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

       <!--使用druid连接池配置数据源-->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
              <property name="filters" value="config,wall,stat" />
              <property name="url" value="${jdbc.url}" />
              <property name="username" value="${jdbc.username}" />
              <property name="password" value="${jdbc.password}" />
              <!-- 连接池最大使用连接数 -->
              <property name="maxActive" value="${maxActive}"/>
              <!-- 初始化连接大小 -->
              <property name="initialSize" value="${initialSize}"/>
              <!-- 获取连接最大等待时间 -->
              <property name="maxWait" value="${maxWait}" />
              <!-- 连接池最小空闲 -->
              <property name="minIdle" value="${minIdle}" />
              <!-- 自动清除无用连接 -->
              <property name="removeAbandoned" value="${removeAbandoned}"/>
              <!-- 清除无用连接的等待时间 -->
              <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
              <!-- 连接属性 -->
              <property name="connectionProperties" value="${connectionProperties}"/>
              <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
              <property name="poolPreparedStatements" value="true"/>
              <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
              &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
              <property name="timeBetweenEvictionRunsMillis" value="60000" />
              &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
              <property name="minEvictableIdleTimeMillis" value="300000" />
              <property name="testWhileIdle" value="true" />
              &lt;!&ndash;在进行borrowObject进行处理时，对拿到的connection进行validateObject校验&ndash;&gt;
              <property name="testOnBorrow" value="true" />
              &lt;!&ndash;returnObject对返回的connection进行validateObject校验，个人觉得对数据库连接池的管理意义不大&ndash;&gt;
              <property name="testOnReturn" value="true" />-->
       </bean>

       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="configLocation" value="classpath:/config/mybatis-config.xml"/>
              <property name="mapperLocations">
                     <list>
                            <value>classpath:/mapper/**/*.xml</value>
                     </list>
              </property>
              <!--配置后,sqlSessionFactory可分辨是那种数据库(用于PageSqlSessionService)-->
              <property name="configurationProperties">
                     <props>
                            <prop key="dialect">oracle</prop>
                     </props>
              </property>
       </bean>

       <!--配置事务-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
              <!--不会因为调用的子方法抛出异常而回滚(可以在主方法try catch组装后抛出产生回滚)-->
              <property name="globalRollbackOnParticipationFailure" value="false"/>
       </bean>

       <tx:annotation-driven transaction-manager="transactionManager"/>

       <!-- 扫描dao -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.miao.manage.dao"/>
              <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
       </bean>

</beans>